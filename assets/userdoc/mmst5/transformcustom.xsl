<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2020

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://www.w3.org/1999/xhtml" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 xs fn">
    <xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
    <xsl:strip-space elements="*" />
    <xsl:template match="/">
        
             <xsl:for-each select="ns0:html/ns0:body/ns0:div/ns0:ul">
                <xsl:apply-templates />
            </xsl:for-each>
        
    </xsl:template>
    
    <xsl:template match="ns0:li" name="li">
        <xsl:choose>
            <xsl:when test="parent::ns0:ul/parent::ns0:div">
                <Chapter>
                    <xsl:attribute name="name">
                        <xsl:choose>
                            <xsl:when test="exists(./ns0:a)">
                                <xsl:value-of select="normalize-space(./ns0:a)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="normalize-space(./text())"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:attribute>
                    
                    <xsl:attribute name="url">
                        <xsl:value-of select="replace(./ns0:a/@href, '/', '::')"/>
                    </xsl:attribute>
                    
                    <xsl:attribute name="shortdesc">
                        <xsl:variable name="url">
                            <xsl:value-of select="./ns0:a/@href"/>
                        </xsl:variable>
                        <xsl:value-of select="document($url)//ns0:p[@class='shortdesc']" />
                    </xsl:attribute>
                    
                    <xsl:attribute name="hasChildren">
                        <xsl:value-of select="exists(./ns0:ul/ns0:li)" />
                    </xsl:attribute>
                    
                    <xsl:if test="exists(./ns0:ul/ns0:li)">
                        <xsl:for-each select="./ns0:ul">
                            <xsl:apply-templates />
                        </xsl:for-each>
                    </xsl:if>
                </Chapter>
            </xsl:when>
            <xsl:otherwise>
                <children>
                    <xsl:attribute name="name">
                        <xsl:choose>
                            <xsl:when test="exists(./ns0:a)">
                                <xsl:value-of select="normalize-space(./ns0:a)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="normalize-space(./text())"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:attribute>
                    
                    <xsl:attribute name="url">
                        <xsl:value-of select="replace(./ns0:a/@href, '/', '::')"/>
                    </xsl:attribute>
                    
                    <xsl:attribute name="shortdesc">
                        <xsl:variable name="url">
                            <xsl:value-of select="./ns0:a/@href"/>
                        </xsl:variable>
                        <xsl:value-of select="document($url)//ns0:p[@class='shortdesc']" />
                    </xsl:attribute>

                    <xsl:attribute name="hasChildren">
                        <xsl:value-of select="exists(./ns0:ul/ns0:li)" />
                    </xsl:attribute>
                    
                    <xsl:if test="exists(./ns0:ul/ns0:li)">
                        <xsl:for-each select="./ns0:ul">
                            <xsl:apply-templates />
                        </xsl:for-each>
                    </xsl:if>
                </children>
            </xsl:otherwise>
        </xsl:choose>
        
    </xsl:template>
    
    <xsl:template match="text()">
        
    </xsl:template>
</xsl:stylesheet>
